#include<iostream>
using namespace std;
int a[4][4];
int i,j;
int ss;
//以下是验证点的函数；
bool  YanZheng(int x,int y,int a[4][4],int k)
{
    if(x>3||y>3)
        return false;
    if(x<0||y<0)
        return false;
    if(a[x][y]==0)
        return false;
    if(k%2==1&&(a[x][y]==-1||a[x][y]==-3))
        return false;
    if(k%2==0&&(a[x][y]==-2||a[x][y]==-3))
       return false;
    if(a[x][y]==-3)
        return false;
    return true;//默认为真的
}
//以下定义递归函数；
void Show(int x,int y,int k)
{
    cout<<"第"<<k<<"次经过的点:";
        cout<<x<<"*"<<y<<"\n";
}


bool FindNext(int x,int y,int a[4][4],int k)
{
    bool TorF=false;     
    if(x==0&&y==0)
    {   
        
        cout<<"@_@——不容易啊！"<<"seccsessful!\n";
        cout<<"\n";
        TorF=true;
        return TorF;
    
        //exit(0);
    }
    else
    {
            if(k%2==1)//向着左下角走；
            {
              if(YanZheng(x-2,y,a,k))
               {
                  int* tmp=new int[8];
                  *tmp=a[x-2][y];
                  if(a[x-2][y]==1)//未有过
                     a[x-2][y]=-1;
                  if(a[x-2][y]==-2)//左下角来过一次；
                      a[x-2][y]=-3; 
                  k++;
                  if(FindNext(x-2,y,a,k)==false)
                  {
                      a[x-2][y]=*tmp;k--;
                  }
                  else
                  {
                      Show(x-2,y,k);
                      TorF=true;
                      k--;
                      a[x-2][y]=*tmp;
                  }
                  delete tmp;//不要忘记释放内存！！
              }
               if(YanZheng(x-1,y,a,k))
               {
                  int* tmp=new int[8];
                  *tmp=a[x-1][y];
                  if(a[x-1][y]==1)//未有过
                     a[x-1][y]=-1;
                  if(a[x-1][y]==-2)//左下角来过一次；
                      a[x-1][y]=-3; 
                  k++;
                  if(FindNext(x-1,y,a,k)==false)
                  {
                      a[x-1][y]=*tmp;k--;
                  }
                  else
                  {
                      Show(x-1,y,k);
                      TorF=true;
                      k--;
                      a[x-1][y]=*tmp;
                  }
                  delete tmp;//不要忘记释放内存！！
              }

                  //FindNext(x-2,y,a,k,nod);
                  if(YanZheng(x-1,y-1,a,k))
               {
                  int* tmp=new int[8];
                  *tmp=a[x-1][y-1];
                  if(a[x-1][y-1]==1)//未有过
                     a[x-1][y-1]=-1;
                  if(a[x-1][y-1]==-2)//左下角来过一次；
                      a[x-1][y-1]=-3; 
                  k++;
                  if(FindNext(x-1,y-1,a,k)==false)
                  {
                      a[x-1][y-1]=*tmp;k--;
                  }
                  else
                  {
                      Show(x-1,y-1,k);
                      TorF=true;
                      k--;
                      a[x-1][y-1]=*tmp;
                  }
                  delete tmp;//不要忘记释放内存！！
               }
              if(YanZheng(x,y-2,a,k))
               {
                  int* tmp=new int[8];
                  *tmp=a[x][y-2];
                  if(a[x][y-2]==1)//未有过
                     a[x][y-2]=-1;
                  if(a[x][y-2]==-2)//左下角来过一次；
                      a[x][y-2]=-3; 
                  k++;
                  if(FindNext(x,y-2,a,k)==false)
                  {
                      a[x][y-2]=*tmp;k--;
                  }
                  else
                  {
                      Show(x,y-2,k);
                      TorF=true;
                      k--;
                      a[x][y-2]=*tmp;
                  }
                  delete tmp;//不要忘记释放内存！！
              }
              if(YanZheng(x,y-1,a,k))
               {
                  int* tmp=new int[8];
                  *tmp=a[x][y-1];
                  if(a[x][y-1]==1)//未有过
                     a[x][y-1]=-1;
                  if(a[x][y-1]==-2)//左下角来过一次；
                      a[x][y-1]=-3; 
                  k++;
                  if(FindNext(x,y-1,a,k)==false)
                  {
                      a[x][y-1]=*tmp;k--;
                  }
                  else
                  {
                      Show(x,y-1,k);
                      TorF=true;
                      k--;
                      a[x][y-1]=*tmp;
                  }
                  delete tmp;//不要忘记释放内存！！
              }
        
              
             
               
          }
          if(k%2==0)//向着右上角角走；
         {
             
                  if(YanZheng(x+2,y,a,k))
               {
                       int* tmp=new int[8];
                       *tmp=a[x+2][y];
                if(a[x+2][y]==1)//未有过
                      a[x+2][y]=-2;
                  if(a[x+2][y]==-1)//右上角来过一次；
                      a[x+2][y]=-3;
                  k++;
                  if(FindNext(x+2,y,a,k)==false)
                  {     
                      a[x+2][y]=*tmp;
                      k--;
                  }
                  else
                  {
                      Show(x+2,y,k);
                      
                      TorF=true;
                      k--;
                      a[x+2][y]=*tmp;
                  }
                  delete tmp;
               }
               if(YanZheng(x+1,y,a,k))
               {
                       int* tmp=new int[8];
                       *tmp=a[x+1][y];
                if(a[x+1][y]==1)//未有过
                      a[x+1][y]=-2;
                  if(a[x+1][y]==-1)//右上角来过一次；
                      a[x+1][y]=-3;
                  k++;
                  if(FindNext(x+1,y,a,k)==false)
                  {     
                      a[x+1][y]=*tmp;
                      k--;
                  }
                  else
                  {
                      Show(x+1,y,k);
                      
                      TorF=true;
                      k--;
                      a[x+1][y]=*tmp;
                  }
                  delete tmp;
               }
               if(YanZheng(x+1,y+1,a,k))
               {
                       int* tmp=new int[8];
                       *tmp=a[x+1][y+1];
                if(a[x+1][y+1]==1)//未有过
                      a[x+1][y+1]=-2;
                  if(a[x+1][y+1]==-1)//右上角来过一次；
                      a[x+1][y+1]=-3;
                  k++;
                  if(FindNext(x+1,y+1,a,k)==false)
                  {     
                      a[x+1][y+1]=*tmp;
                      k--;
                  }
                  else
                  {
                      Show(x+1,y+1,k);
                      
                      TorF=true;
                      k--;
                      a[x+1][y+1]=*tmp;
                  }
                  delete tmp;
               }
                if(YanZheng(x,y+1,a,k))
               {
                       int* tmp=new int[8];
                       *tmp=a[x][y+1];
                if(a[x][y+1]==1)//未有过
                      a[x][y+1]=-2;
                  if(a[x][y+1]==-1)//右上角来过一次；
                      a[x][y+1]=-3;
                  k++;
                  if(FindNext(x,y+1,a,k)==false)
                  {     
                      a[x][y+1]=*tmp;
                      k--;
                  }
                  else
                  {
                      Show(x,y+1,k);
                      
                      TorF=true;
                      k--;
                      a[x][y+1]=*tmp;
                  }
                  delete tmp;
               }
               if(YanZheng(x,y+2,a,k))
               {
                       int* tmp=new int[8];
                       *tmp=a[x][y+2];
                if(a[x][y+2]==1)//未有过
                      a[x][y+2]=-2;
                  if(a[x][y+2]==-1)//右上角来过一次；
                      a[x][y+2]=-3;
                  k++;
                  if(FindNext(x,y+2,a,k)==false)
                  {     
                      a[x][y+2]=*tmp;
                      k--;
                  }
                  else
                  {
                      Show(x,y+2,k);
                      
                      TorF=true;
                      k--;
                      a[x][y+2]=*tmp;
                  }
                  delete tmp;
               }
             }
             
               return TorF;
         }
}

int main()
{
   // cin>>a;
//    cout<<a;
    //这里先进行矩阵初始化工作；让安全的点等于1；非安全的店为0；

for(i=0;i<=3;i++)
for(j=0;j<=3;j++)
{
if((i==0)||(i==3)||((i>=j)&&((3-i)>=(3-j))))
{
a[i][j]=1;//安全；
}
else 
a[i][j]=0;
}

//以上为初始话任务；

//接下来递归调用；
a[3][3]=-3;
int k=1;
FindNext(3,3,a,k);

cin>>ss;

return 0;
}
